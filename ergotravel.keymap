/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>


#define DEFAULT 0
#define RAISE 1
#define LOWER 2
#define BLUET 3
#define FUNCT 4

&lt {
    tapping_term_ms = <300>;
};

/ {
	keymap {
		compatible = "zmk,keymap";

		default_layer {
    bindings = <
&gresc        &kp Q    &kp W    &kp E    &kp R   &kp T     &kp PG_UP         &kp BSPC  &kp Y   &kp U     &kp I     &kp O   &kp P    &kp BSLH
&kp TAB        &kp A    &kp S    &kp D    &lt 4 F   &kp G     &kp C_PP         &kp BSPC  &kp H   &kp J     &kp K     &kp L   &kp SEMI &kp SQT
&kp LSHFT      &kp Z    &kp X    &kp C    &kp V   &kp B     &kp SPACE         &kp RET   &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp RSHFT
&mo 3          &mo 2    &kp LCTL &kp LALT &kp LGUI &kp SPACE                  &kp RET   &mo 1   &kp LEFT  &kp UP    &kp DOWN &kp RIGHT
>;

sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};

    raise_layer {
    bindings = <
&kp ESC        &kp N1   &kp N2   &kp N3   &kp N4  &kp N5    &trans       &kp DEL  &kp N6  &kp N7    &kp N8     &kp N9  &kp N0  &kp EQUAL
&kp TAB        &trans   &trans   &trans   &trans  &trans    &trans      &kp DEL  &trans  &trans    &trans     &trans  &trans  &kp MINUS
&kp CAPS      &trans   &trans   &trans   &trans  &trans    &kp SPACE         &kp RET   &trans  &kp C_PP  &kp C_PREV &kp C_NEXT  &trans  &kp RSHFT
&trans         &trans   &kp LCTL &kp LALT &kp LGUI &kp SPACE                  &kp RET   &trans  &kp HOME  &kp PG_UP  &kp PG_DN &kp END
>;
    		};

    lower_layer {
    bindings = <
&kp ESC        &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT &trans        &kp DEL  &kp CARET &kp AMPS  &kp STAR &kp LPAR &kp RPAR &kp PLUS
&kp TAB        &trans   &trans   &trans   &trans  &trans    &trans         &kp DEL  &trans  &trans    &trans    &kp LBKT   &kp RBKT  &kp LA(LS(MINUS))
&kp LSHFT      &trans   &trans   &trans   &trans  &trans    &kp SPACE         &kp RET   &trans  &trans    &trans    &kp LBRC   &kp RBRC  &kp RSHFT
&trans         &trans   &kp LCTL &kp LALT &kp LGUI &kp SPACE                  &kp RET   &trans  &kp LEFT  &kp UP    &kp DOWN &kp RIGHT
>;
        };

    bluet_layer {
    bindings = <
&bt BT_CLR &bt BT_SEL 1   &bt BT_SEL 2   &trans   &reset  &trans    &trans        &trans  &trans &trans &trans &trans &trans &trans
&trans     &kp X   &trans   &trans   &trans  &trans    &trans           &trans  &trans  &trans    &trans    &trans   &trans  &trans
&trans     &trans   &trans   &trans   &trans  &bootloader    &kp SPACE         &kp RET   &trans  &trans    &trans    &trans   &trans  &kp RSHFT
&trans     &trans   &kp LCTL &kp LALT &kp LGUI &kp SPACE                  &kp RET   &trans  &kp LEFT  &kp UP    &kp DOWN &kp RIGHT
>;
        };

    funct_layer {
    bindings = <
&trans    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5    &trans        &trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10 &trans
&trans     &trans   &trans   &trans   &trans  &trans    &trans           &trans  &trans  &trans    &trans    &trans   &trans  &trans
&trans     &kp F11   &kp F12   &kp F13   &kp F14   &kp F15    &kp SPACE         &kp RET   &kp F16   &kp F17   &kp F18   &kp F19   &kp F20  &kp RSHFT
&trans     &trans   &kp LCTL &kp LALT &kp LGUI &kp SPACE                  &kp RET   &trans  &kp LEFT  &kp LG(LA(LC(LSHFT))) &kp LG(LA(LCTL)) &kp RIGHT
>;
        };

	};
};
